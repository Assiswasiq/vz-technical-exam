{"version":3,"sources":["../src/app.js"],"names":["dotenv","config","path","app","set","process","env","OPENSHIFT_NODEJS_IP","PORT","use","bodyParser","json","urlencoded","extended","routes","errorHandler","server","http","createServer","listen","get","console","log","chalk","green","module","exports"],"mappings":"aAAA,2BAKA,wDACA,kDACA,oDACA,+DACA,sDAEA,+DAEA,mD,oFAXA;AACA;AACA,G,CAWA;AACA;AACA,GACAA,mBAAOC,MAAP,CAAc,CAAEC,IAAI,CAAE,MAAR,CAAd,EAEA;AACA;AACA,GACA,GAAMC,CAAAA,GAAG,CAAG,yBAAZ,CAEA;AACA;AACA,GACAA,GAAG,CAACC,GAAJ,CAAQ,MAAR,CAAgBC,OAAO,CAACC,GAAR,CAAYC,mBAAZ,EAAmC,SAAnD,EACAJ,GAAG,CAACC,GAAJ,CAAQ,MAAR,CAAgBC,OAAO,CAACC,GAAR,CAAYE,IAAZ,EAAoB,IAApC,EACAL,GAAG,CAACM,GAAJ,CAAQC,uBAAWC,IAAX,EAAR,EACAR,GAAG,CAACM,GAAJ,CAAQC,uBAAWE,UAAX,CAAsB,CAAEC,QAAQ,CAAE,IAAZ,CAAtB,CAAR,EAGA;AACA;AACA,GACAV,GAAG,CAACM,GAAJ,CAAQ,MAAR,CAAgBK,kBAAhB,EAEA;AAEA;AACA;AACA,GACAX,GAAG,CAACM,GAAJ,CAAQM,0BAAR,EAEA,GAAMC,CAAAA,MAAM,CAAGC,iBAAKC,YAAL,CAAkBf,GAAlB,CAAf,CAEA;AACA;AACA,GAEAa,MAAM,CAACG,MAAP,CAAchB,GAAG,CAACiB,GAAJ,CAAQ,MAAR,CAAd,CAA+B,UAAM,CACnCC,OAAO,CAACC,GAAR,CAAY,qDAAZ,CAAmEC,kBAAMC,KAAN,CAAY,QAAZ,CAAnE,CAAqFrB,GAAG,CAACiB,GAAJ,CAAQ,MAAR,CAArF,CAAsGjB,GAAG,CAACiB,GAAJ,CAAQ,KAAR,CAAtG,EACAC,OAAO,CAACC,GAAR,CAAY,0BAAZ,CACD,CAHD,EAKAG,MAAM,CAACC,OAAP,CAAiBV,MAAjB","sourcesContent":["import '@babel/polyfill';\n\n/**\n * Module dependencies.\n */\nimport express from 'express';\nimport http from 'http';\nimport chalk from 'chalk';\nimport bodyParser from 'body-parser';\nimport dotenv from 'dotenv';\n\nimport routes from './routes/routes';\n\nimport { errorHandler } from './utils/error-handler';\n\n/**\n * Load environment variables from .env file, where API keys and passwords are configured.\n */\ndotenv.config({ path: '.env' });\n\n/**\n * Create Express server.\n */\nconst app = express();\n\n/**\n * Express configuration.\n */\napp.set('host', process.env.OPENSHIFT_NODEJS_IP || '0.0.0.0');\napp.set('port', process.env.PORT || 8080);\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\n\n\n/**\n * Routes.\n */\napp.use('/api', routes);\n\n// The error handler must be before any other error middleware and after all controllers\n\n/**\n * Error Handler.\n */\napp.use(errorHandler);\n\nconst server = http.createServer(app);\n\n/**\n * Start Express server.\n */\n\nserver.listen(app.get('port'), () => {\n  console.log('%s App is running at http://localhost:%d in %s mode', chalk.green('âœ“'), app.get('port'), app.get('env'));\n  console.log('  Press CTRL-C to stop\\n');\n});\n\nmodule.exports = server;\n"],"file":"app.js"}