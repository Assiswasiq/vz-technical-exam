{"version":3,"sources":["transaction.service.js"],"names":["TransactionService","fileHandler","__fileHandler","__method","credit","debit","readFile","__dirname","data","accountDetails","existedTransactions","newTransaction","createCurrentTimestamp","type","balance","amount","writeFile","accountBalance","Helper","module","exports"],"mappings":";;;;AAAA;;AACA;;AACA;;AAEA;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAIMA,kB;;;;;AAEF,8BAAYC,WAAZ,EAAyB;AAAA;;AAAA;;AACrB;AACA,UAAKC,aAAL,GAAqBD,WAArB;AACA,UAAKE,QAAL,GAAgB;AACZC,MAAAA,MAAM,EAAE,eADI;AAEZC,MAAAA,KAAK,EAAE;AAFK,KAAhB;AAHqB;AAOxB;;;;;2FAED;AAAA;AAAA;AAAA;AAAA;AAAA,iDACW,KAAKH,aAAL,CAAmBI,QAAnB,CAA4BC,SAA5B,EAAuC,+BAAvC,CADX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;uFAIA,kBAAwBC,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACiC,KAAKN,aAAL,CAAmBI,QAAnB,CAA4BC,SAA5B,EAAuC,0BAAvC,CADjC;;AAAA;AACUE,gBAAAA,cADV;AAAA;AAAA,uBAEsC,KAAKP,aAAL,CAAmBI,QAAnB,CAA4BC,SAA5B,EAAuC,+BAAvC,CAFtC;;AAAA;AAEUG,gBAAAA,mBAFV;AAGUC,gBAAAA,cAHV;AAG6B,wBAAM;AAHnC,mBAGgDH,IAHhD;AAGsD,mCAAiB,KAAKI,sBAAL;AAHvE;AAAA,+BAIU,KAAKV,aAJf;AAAA,+BAIuCK,SAJvC;AAAA;AAAA,uBAIiG,KAAK,KAAKJ,QAAL,CAAcK,IAAI,CAACK,IAAnB,CAAL,EAA+BJ,cAAc,CAACK,OAA9C,EAAuDN,IAAI,CAACO,MAA5D,CAJjG;;AAAA;AAAA;AAAA;AAIgF,2BAJhF;AAAA;AAAA;AAAA,oCAI6BC,SAJ7B,kCAIkD,0BAJlD;;AAAA;AAAA;AAAA,uBAKU,KAAKd,aAAL,CAAmBc,SAAnB,CAA6BT,SAA7B,EAAwC,+BAAxC,+BAA6EG,mBAA7E,sBAAuGC,cAAvG,IALV;;AAAA;AAAA,kDAMWA,cANX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;mFASA,kBAAoBM,cAApB,EAAoCF,MAApC;AAAA;AAAA;AAAA;AAAA;AAAA,kDACWE,cAAc,GAAGF,MAD5B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;kFAIA,kBAAmBE,cAAnB,EAAmCF,MAAnC;AAAA;AAAA;AAAA;AAAA;AAAA,sBACOA,MAAM,GAAGE,cADhB;AAAA;AAAA;AAAA;;AAAA,sBACsC,uCAAiB,uBAAjB,CADtC;;AAAA;AAAA,kDAEWA,cAAc,GAAGF,MAF5B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;EA5B6BG,c;;AAmCjCC,MAAM,CAACC,OAAP,GAAiBpB,kBAAjB","sourceRoot":"/home/assis/Desktop/Personal/github apps/deline-media-accu/src/services/","sourcesContent":["import fs from 'fs';\nimport util from 'util';\nimport { v4 as uuidv1 } from 'uuid';\n\nimport {\n    Helper\n} from '../shared';\n\nimport {\n    generateMessages\n} from '../utils/generate-message';\n\nclass TransactionService extends Helper {\n\n    constructor(fileHandler) {\n        super();\n        this.__fileHandler = fileHandler;\n        this.__method = {\n            credit: 'creditAccount',\n            debit: 'debitAccount'\n        }\n    }\n\n    async getTransactionHistory() {\n        return this.__fileHandler.readFile(__dirname, '../database/transactions.json');\n    }\n\n    async createTransaction(data) {\n        const accountDetails = await this.__fileHandler.readFile(__dirname, '../database/account.json');\n        const existedTransactions = await this.__fileHandler.readFile(__dirname, '../database/transactions.json');\n        const newTransaction = { 'id': uuidv1(), ...data, 'effectiveDate': this.createCurrentTimestamp()};\n        await this.__fileHandler.writeFile(__dirname, '../database/account.json', { 'balance': await this[this.__method[data.type]](accountDetails.balance, data.amount) })\n        await this.__fileHandler.writeFile(__dirname, '../database/transactions.json', [...existedTransactions, { ...newTransaction }])\n        return newTransaction\n    }\n\n    async creditAccount(accountBalance, amount) {\n        return accountBalance + amount;\n    }\n\n    async debitAccount(accountBalance, amount) {\n        if(amount > accountBalance) throw generateMessages('IN_SUFFICIENT_BALANCE')\n        return accountBalance - amount;\n    }\n\n}\n\nmodule.exports = TransactionService;"]}