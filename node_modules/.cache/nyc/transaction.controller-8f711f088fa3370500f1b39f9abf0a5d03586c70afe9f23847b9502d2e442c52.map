{"version":3,"sources":["transaction.controller.js"],"names":["TransactionController","TransactionService","__service","__req","res","next","getTransactionHistory","response","locals","data","result","message_code","req","body","createTransaction","module","exports"],"mappings":";;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAEMA,qB;AAEF,iCAAYC,kBAAZ,EAAgC;AAAA;;AAC5B,SAAKC,SAAL,GAAiBD,kBAAjB;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;;;;yEACI,iBAAUE,KAAV,EAAiBC,GAAjB,EAAsBC,IAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAE+B,KAAKH,SAAL,CAAeI,qBAAf,EAF/B;;AAAA;AAEcC,gBAAAA,QAFd;AAIQH,gBAAAA,GAAG,CAACI,MAAJ,CAAWC,IAAX,GAAkB;AAAEC,kBAAAA,MAAM,qBAAOH,QAAP,CAAR;AAA2BI,kBAAAA,YAAY,EAAE;AAAzC,iBAAlB;AAEAN,gBAAAA,IAAI;AANZ;AAAA;;AAAA;AAAA;AAAA;AASQA,gBAAAA,IAAI,aAAJ;;AATR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;AAaA;AACJ;AACA;AACA;AACA;AACA;;;;;0EACI,kBAAWO,GAAX,EAAgBR,GAAhB,EAAqBC,IAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGgBQ,gBAAAA,IAHhB,GAGyBD,GAHzB,CAGgBC,IAHhB;AAAA;AAAA,uBAK+B,KAAKX,SAAL,CAAeY,iBAAf,CAAiCD,IAAjC,CAL/B;;AAAA;AAKcN,gBAAAA,QALd;AAOQH,gBAAAA,GAAG,CAACI,MAAJ,CAAWC,IAAX,GAAkB;AAAEC,kBAAAA,MAAM,oBAAOH,QAAP,CAAR;AAA2BI,kBAAAA,YAAY,EAAE;AAAzC,iBAAlB;AAEAN,gBAAAA,IAAI;AATZ;AAAA;;AAAA;AAAA;AAAA;AAYQA,gBAAAA,IAAI,cAAJ;;AAZR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;;;AAkBJU,MAAM,CAACC,OAAP,GAAiBhB,qBAAjB","sourceRoot":"/home/assis/Desktop/Personal/github apps/deline-media-accu/src/controllers/","sourcesContent":["\nimport { generateMessages } from '../utils/generate-message';\n\nclass TransactionController {\n\n    constructor(TransactionService) {\n        this.__service = TransactionService;\n    }\n\n    /**\n     * Get transactions history\n     * @param {*} req \n     * @param {*} res \n     * @param {*} next \n     */\n    async get(__req, res, next) {\n        try {\n            const response = await this.__service.getTransactionHistory();\n\n            res.locals.data = { result: [ ...response ], message_code: 'TRANSACTION_HISTORY_FETCHED_SUCCESSFULLY' }\n\n            next();\n\n        } catch (err) {\n            next(err);\n        }\n    }\n\n    /**\n     * Create transaction\n     * @param {*} req \n     * @param {*} res \n     * @param {*} next \n     */\n    async post(req, res, next) {\n        try {\n\n            const { body } = req\n\n            const response = await this.__service.createTransaction(body);\n\n            res.locals.data = { result: { ...response }, message_code: 'TRANSACTION_CREATED_SUCCESSFULLY' }\n\n            next();\n\n        } catch (err) {\n            next(err);\n        }\n    }\n\n}\n\nmodule.exports = TransactionController;"]}